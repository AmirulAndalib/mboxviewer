//
//////////////////////////////////////////////////////////////////
//
//  Windows Mbox Viewer is a free tool to view, search and print mbox mail archives.
//
// Source code and executable can be downloaded from
//  https://sourceforge.net/projects/mbox-viewer/  and
//  https://github.com/eneam/mboxviewer
//
//  Copyright(C) 2019  Enea Mansutti, Zbigniew Minciel
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the version 3 of GNU Affero General Public License
//  as published by the Free Software Foundation; 
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU
//  Library General Public License for more details.
//
//  You should have received a copy of the GNU Library General Public
//  License along with this program; if not, write to the
//  Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
//  Boston, MA  02110 - 1301, USA.
//
//////////////////////////////////////////////////////////////////
//

// DataFolderCponfigDlg.cpp : implementation file
//

#include "stdafx.h"
#include "FileUtils.h"
#include "SimpleString.h"
#include "BrowseForFolder.h"
#include "DataFolderConfigDlg.h"
#include "afxdialogex.h"
#include "ResHelper.h"
#include "mboxview.h"


// DataFolderCponfigDlg dialog

IMPLEMENT_DYNAMIC(DataFolderConfigDlg, CDialogEx)

extern const wchar_t *sz_Software_mboxview;

DataFolderConfigDlg::DataFolderConfigDlg(BOOL restartRequired, CWnd* pParent /*=nullptr*/)
DIALOG_FROM_TEMPLATE( : CDialogEx(IDD_DATA_FOLDER_DLG, pParent))
{

	m_restartRequired = restartRequired;
	m_returnCode = IDCANCEL;

	m_folderPathColor = RGB(255, 255, 255);  // white
	m_folderPathBrush.CreateSolidBrush(m_folderPathColor);

	// Get the log font. Setting text font works here 
	NONCLIENTMETRICS ncm;
	memset(&ncm, 0, sizeof(NONCLIENTMETRICS));
	ncm.cbSize = sizeof(NONCLIENTMETRICS);

	BOOL ver = ::SystemParametersInfo(SPI_GETNONCLIENTMETRICS,
		sizeof(NONCLIENTMETRICS), &ncm, 0);

	HDC hdc = ::GetWindowDC(NULL);
	ncm.lfMessageFont.lfWeight = FW_NORMAL; //  400;
	ncm.lfMessageFont.lfHeight = -MulDiv(12, GetDeviceCaps(hdc, LOGPIXELSY), 72);;
	m_TextFont.CreateFontIndirect(&ncm.lfMessageFont);
	::ReleaseDC(NULL, hdc);

	hdc = ::GetWindowDC(NULL);
	ncm.lfMessageFont.lfWeight = FW_BOLD; // 700
	ncm.lfMessageFont.lfHeight = -MulDiv(24, GetDeviceCaps(hdc, LOGPIXELSY), 72);;
	m_BoldFont.CreateFontIndirect(&ncm.lfMessageFont);
	::ReleaseDC(NULL, hdc);

	m_ButtonBrush.CreateSolidBrush(RGB(255, 255, 0));

	m_pParent = pParent;
}

DataFolderConfigDlg::~DataFolderConfigDlg()
{
}

INT_PTR DataFolderConfigDlg::DoModal()
{
#ifdef _DIALOG_FROM_TEMPLATE
	INT_PTR ret = CMainFrame::SetTemplate(this, IDD_DATA_FOLDER_DLG, m_pParent);
#else
	INT_PTR ret = CDialogEx::DoModal();
#endif
	return ret;
}

BOOL DataFolderConfigDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// TODO:  Add extra initialization here

	CString section_general = CString(sz_Software_mboxview) + L"\\General";

	m_strCurrentDataFolder = CProfile::_GetProfileString(HKEY_CURRENT_USER, section_general, L"dataFolder");
	m_strCurrentDataFolder.TrimRight(L"\\");

	m_introText.SetFont(&m_TextFont);
	m_introText.SetWindowText(L"This dialog enables users to configure the root data folder."
		" MBox Viewer will create a UMBoxViewer folder under the configured root data folder"
		" for all files generated by MBox Viewer such as mails exported in PDF format.\n\n"
		"IMPORTANT: Data Folder path should be as short as possible to avoid truncation of names of files generated by MBox Viewer."
		" Note that the file path is limited to 255 characters.") ;

	if (GetSafeHwnd())
	{
		CWnd *p = GetDlgItem(IDC_DATA_FOLDER_INTRO_1);
		if (p)
		{
			p->EnableWindow(TRUE);
		}
		p = GetDlgItem(IDC_CURRENT_FOLDER_PATH);
		if (p)
		{
			p->EnableWindow(FALSE);
		}
		p = GetDlgItem(IDC_SELECT_DATA_FOLDER_BUTTON);
		if (p)
		{
			p->EnableWindow(TRUE);
		}

		p = GetDlgItem(IDC_USER_SELECTED_FOLDER_PATH);
		if (p)
		{
			p->EnableWindow(TRUE);
		}
	}

	m_currentDataFolder.SetFont(&m_BoldFont);
	if (m_strCurrentDataFolder.IsEmpty())
	{
		m_strUserConfiguredDataFolder = CmboxviewApp::m_startupPath;
		if (GetSafeHwnd())
		{
			CWnd* p = GetDlgItem(IDC_USER_SELECTED_FOLDER_PATH);
			if (p)
			{
				m_userConfiguredDataFolder.SetFont(&m_BoldFont);
				m_userConfiguredDataFolder.SetWindowText(m_strUserConfiguredDataFolder);
				p->EnableWindow(FALSE);
			}
			p = GetDlgItem(IDC_SELECT_OK_TO_SELECT_DFLT_DATA_FOLDER);
			if (p)
			{
				CString text = L"Or select OK to create Data Folder under the installation folder";
				p->SetWindowText(text);
				p->EnableWindow(TRUE);
			}
		}
	}

	m_currentDataFolder.SetWindowText(m_strCurrentDataFolder);

	ResHelper::LoadDialogItemsInfo(this);
	ResHelper::UpdateDialogItemsInfo(this);
	BOOL retA = ResHelper::ActivateToolTips(this, m_toolTip);

	return TRUE;  // return TRUE unless you set the focus to a control
				  // EXCEPTION: OCX Property Pages should return FALSE
}

void DataFolderConfigDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_DATA_FOLDER_INTRO_1, m_introText);
	DDX_Control(pDX, IDC_USER_SELECTED_FOLDER_PATH, m_userConfiguredDataFolder);
	DDX_Control(pDX, IDC_CURRENT_FOLDER_PATH, m_currentDataFolder);
	DDX_Control(pDX, IDC_SELECT_OK_TO_SELECT_DFLT_DATA_FOLDER, m_defaultDataFolderText);
}


BEGIN_MESSAGE_MAP(DataFolderConfigDlg, CDialogEx)
	ON_WM_CTLCOLOR()
	ON_BN_CLICKED(IDOK, &DataFolderConfigDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDC_SELECT_DATA_FOLDER_BUTTON, &DataFolderConfigDlg::OnBnClickedSelectDataFolderButton)
	ON_EN_CHANGE(IDC_USER_SELECTED_FOLDER_PATH, &DataFolderConfigDlg::OnEnChangeUserSelectedFolderPath)
	ON_EN_CHANGE(IDC_CURRENT_FOLDER_PATH, &DataFolderConfigDlg::OnEnChangeCurrentFolderPath)
	ON_NOTIFY_EX(TTN_NEEDTEXT, 0, &DataFolderConfigDlg::OnTtnNeedText)
END_MESSAGE_MAP()


// DataFolderConfigDlg message handlers
void DataFolderConfigDlg::OnBnClickedSelectDataFolderButton()
{
	// TODO: Add your control notification handler code here
	UpdateData(TRUE);  // Get data from Controls

	CString path = m_strUserConfiguredDataFolder;
	BOOL done = FALSE;
	while (!done)
	{ 
		{  //  CBrowseForFolder bff will be deleted upon exit of this block

			CBrowseForFolder bff(GetSafeHwnd(), CSIDL_DESKTOP, IDS_SELECT_FOLDER);
			if (!path.IsEmpty())
				bff.SetDefaultFolder(path);

			bff.SetFlags(BIF_RETURNONLYFSDIRS);
			if (bff.SelectFolder())
			{
				path = bff.GetSelectedFolder();
				path.TrimRight(L"\\");

				if (FileUtils::IsReadonlyFolder(path))
				{
					CString text;
					CString fmt = L"Selected folder\n\n\"%s\"\n\nis readonly. Try again or cancel";
					ResHelper::TranslateString(fmt);
					text.Format(fmt, path);

					int answer = MessageBox(text, L"Error", MB_APPLMODAL | MB_ICONQUESTION | MB_RETRYCANCEL);
					if (answer == IDRETRY)
					{
						continue;
					}
					else
					{
						done = TRUE;
						return;
					}
				}
				else
				{
					m_strUserConfiguredDataFolder = path;
					m_strUserConfiguredDataFolder.TrimRight(L"\\");
					m_strUserConfiguredDataFolder.Append(L"\\");
					done = TRUE;
					break;
				}
			}
			else  // CANCEL response
			{
				done = TRUE;
				return;
			}
		}
	}

	if (GetSafeHwnd())
	{
		CWnd *p = GetDlgItem(IDC_USER_SELECTED_FOLDER_PATH);
		if (p)
		{
			m_userConfiguredDataFolder.SetFont(&m_BoldFont);
			m_userConfiguredDataFolder.SetWindowText(m_strUserConfiguredDataFolder);
			p->EnableWindow(FALSE);
		}
	}
}

void DataFolderConfigDlg::SetButtonColor(UINT nID, COLORREF color)
{
	return;
#if 0
	CWnd *p = GetDlgItem(nID);
	CButton *b = (CButton*)p;
	if (b)
	{
		int state = b->GetCheck();
		if (state == BST_CHECKED)
		{
			m_brBkMailsDontMatch.DeleteObject();
			m_brBkMailsDontMatch.CreateSolidBrush(m_checkedColor);
		}
	}
#endif
}

HBRUSH DataFolderConfigDlg::OnCtlColor(CDC* pDC, CWnd *pWnd, UINT nCtlColor)
{
	// The below works. It is called for every object in the dialog. May not be the most efficient.

	HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);

	int nID = pWnd->GetDlgCtrlID();
	if (nID == IDC_USER_SELECTED_FOLDER_PATH)
	{
		return (HBRUSH)m_folderPathBrush;
	}
	else
		return hbr;
}

void DataFolderConfigDlg::OnBnClickedOk()
{
	// TODO: Add your control notification handler code here

	m_strUserConfiguredDataFolder.TrimRight(L"\\");
	if (m_strUserConfiguredDataFolder.IsEmpty())
	{
		CString txt = L"Please select root data folder.";
		ResHelper::TranslateString(txt);
		int answer = MessageBox(txt, L"Info", MB_APPLMODAL | MB_ICONQUESTION | MB_OK);
		return;
	}

	CString driveName;
	CString directory;
	CString fileNameBase;
	CString fileNameExtention;

	m_strUserConfiguredDataFolder.Append(L"\\");
	FileUtils::SplitFilePath(m_strUserConfiguredDataFolder, driveName, directory, fileNameBase, fileNameExtention);
	if (directory.GetLength() <= 1)
	{
		CString txt = L"The data files must be created under a named folder.\n"
			"Please create the named folder and try again.";
		ResHelper::TranslateString(txt);
		int answer = MessageBox(txt, L"Info", MB_APPLMODAL | MB_ICONQUESTION | MB_OK);
		return;
	}
	m_strUserConfiguredDataFolder.TrimRight(L"\\");

	if (m_strUserConfiguredDataFolder.Find(L"UMBoxViewer") >= 0)
	{
		CString txt = L"Folder name \"UMBoxViewer\" is reserved.\n"
			"Please create different folder name and try again.";
		ResHelper::TranslateString(txt);
		int answer = MessageBox(txt, L"Info", MB_APPLMODAL | MB_ICONQUESTION | MB_OK);
		return;
	}

	if (!m_strCurrentDataFolder.IsEmpty())
	{
		if (m_strUserConfiguredDataFolder.Compare(m_strCurrentDataFolder) == 0)
		{
			CString txt = L"Current Data Folder and new Data Folder are the same.";
			ResHelper::TranslateString(txt);
			int answer = MessageBox(txt, L"Info", MB_APPLMODAL | MB_ICONQUESTION | MB_OK);
			return;
		}
	}
#if 0
	if (FileUtils::PathDirExists(m_strUserConfiguredDataFolder))
	{
		CString txt = L"Folder \"UMBoxViewer\" already exists under new Root Data Folder.\n\n"
			"Select \"Continue\" to reuse existing \"UMBoxViewer\" folder.\n\n" 
			"Select \"Try Again\" to delete existing \"UMBoxViewer\" folder and continue.\n\n" 
			"Select \"Cancel\" to go back.\n\n";

		int answer = MessageBox(txt, L"Error", MB_APPLMODAL | MB_ICONQUESTION | MB_CANCELTRYCONTINUE);
		m_returnCode = answer;
		if (answer == IDCANCEL)
		{
			return;
		}
		else if (answer == IDTRYAGAIN)
		{
			; //  return;
		}
		else if (answer == IDCONTINUE)
		{
			; // return;
		}
		else
			return;
	}
#else
	// Keep it simple for now. Later inspect old data and decide what to do instead of asking users
	// This wil delete UMBoxViewer if it exists and recreate
	m_returnCode = IDTRYAGAIN;
#endif

	if (!m_strCurrentDataFolder.IsEmpty())
	{
		CString fmt = L"Root Data Folder is about to change from:\n\n\"%s\""
			L"\n\nTo new Root Data Folder:\n\n\"%s\""
			L"\n\nOld Root Data Folder:\n\n\"%s\"\n\nwill not be deleted. It is up to user to delete the folder manually if desired.";
		ResHelper::TranslateString(fmt);
		CString txt;
		txt.Format(fmt, m_strCurrentDataFolder, m_strUserConfiguredDataFolder, m_strCurrentDataFolder);

#if 0
		// Remove. Duplication
		if (m_returnCode == IDTRYAGAIN)
		{
			txt += L"\n\nOld/existing \"UMBoxViewer\" folder will be deleted and new \"UMBoxViewer\" folder will be created by MBox Viewer under the new root data folder\n\n";
		}
		else if (m_returnCode == IDCONTINUE)
		{
			txt += L"\n\nOld/existing \"UMBoxViewer\" folder will be not be deleted by MBox Viewer under the new root data folder\n\n";
		}
#endif
		if (m_restartRequired)
		{
			CString restartText = L"\n\n!!!!!! MBox Viewer will shudown and must be restarted by the user in order for the change to take effect !!!!!!\n\n";
			ResHelper::TranslateString(restartText);
			txt += restartText;
		}
		int answer = MessageBox(txt, L"Info", MB_APPLMODAL | MB_ICONQUESTION | MB_YESNO);
		if (answer == IDNO)
			return;
	}

	CString section_general = CString(sz_Software_mboxview) + L"\\General";

	m_strUserConfiguredDataFolder.TrimRight(L"\\");
	if (!m_strUserConfiguredDataFolder.IsEmpty())
		m_strUserConfiguredDataFolder.Append(L"\\");

	CProfile::_WriteProfileString(HKEY_CURRENT_USER, section_general, L"dataFolder", m_strUserConfiguredDataFolder);

	if (m_restartRequired)
	{
		AfxGetMainWnd()->PostMessage(WM_CLOSE);
	}

	CDialogEx::OnOK();
}


void DataFolderConfigDlg::OnEnChangeUserSelectedFolderPath()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CDialogEx::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here
	int deb = 1;
}

void DataFolderConfigDlg::OnEnChangeCurrentFolderPath()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CDialogEx::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here
	int deb = 1;
}

BOOL DataFolderConfigDlg::OnTtnNeedText(UINT id, NMHDR* pNMHDR, LRESULT* pResult)
{
	UNREFERENCED_PARAMETER(id);
	static CString toolTipText;

	CWnd* parentWnd = (CWnd*)this;
	BOOL bRet = ResHelper::OnTtnNeedText(parentWnd, pNMHDR, toolTipText);
	*pResult = 0;

	return bRet;
}